package com.mi2.model;

import com.base.model.BasePhoneGoodsView;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class PhoneGoodsView extends BasePhoneGoodsView<PhoneGoodsView> {
	public static final PhoneGoodsView dao = new PhoneGoodsView();

	public boolean deletePhoneGoods(PhoneGoodsView t){
		PhoneGoodsView phoneGoodsView = this.findById(t.getPhoneGoodsId());
		//删除手机商品图片信息
		new GoodsColor().deletePhoneGoodsColor(phoneGoodsView.getPhoneGoodsId());
		//删除手机版本信息
		boolean isDelete = new PhoneVersion().deleteById(phoneGoodsView.getPhoneGoodsId());
		//删除手机型号信息，如果删除不掉，说明在使用
		try {
			new PhoneModel().deleteById(phoneGoodsView.getModelId());
			return isDelete;
		}catch (Exception e){
			e.printStackTrace();
			return isDelete;
		}
	}

	public PhoneGoodsView findById(BigDecimal phoneGoodsId) {
		if(null==phoneGoodsId){
			return null;
		}
		PhoneGoodsView t = new PhoneGoodsView();
		t.setPhoneGoodsId(phoneGoodsId);
		List<PhoneGoodsView> phoneGoodsList = this.getAllData(t);
		return phoneGoodsList.size()>0?phoneGoodsList.get(0):null;
	}

	@Override
	public Page<PhoneGoodsView> getAllDataByPage(int pageNumber, int pageSize, PhoneGoodsView t) {
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("from phone_goods_view pgv where 1=1 ");
		ArrayList<Object> values = new ArrayList<>();
		if(t!=null&&!t.getAttrs().isEmpty()){
			if(t.getGoodsSmallTypeId()!=null){
				sbSql.append(" and pgv.goods_small_type_id=?");
				values.add(t.getGoodsSmallTypeId());
			}
			if(t.getPhoneModelId()!=null){
				sbSql.append(" and pgv.phone_model_id=?");
				values.add(t.getPhoneModelId());
			}
			if(t.getPhoneVersionId()!=null){
				sbSql.append(" and pgv.phone_version_id=?");
				values.add(t.getPhoneVersionId());
			}
		}
		return this.paginate(pageNumber,pageSize,"select * ",sbSql.toString(),values.toArray());
	}

	@Override
	public List<PhoneGoodsView> getAllData(PhoneGoodsView t) {
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("select * from phone_goods_view pgv where 1=1 ");
		ArrayList<Object> values = new ArrayList<>();
		if (t!=null&&!t.getAttrs().isEmpty()) {
			if(t.getPhoneGoodsId() != null) {
				sbSql.append(" and pgv.phone_goods_id=?");
				values.add(t.getPhoneGoodsId());
			}
			if(t.getGoodsSmallTypeId()!=null){
				sbSql.append(" and pgv.goods_small_type_id=?");
				values.add(t.getGoodsSmallTypeId());
			}
			if(t.getPhoneModelId()!=null){
				sbSql.append(" and pgv.phone_model_id=?");
				values.add(t.getPhoneModelId());
			}
			if(t.getPhoneVersionId()!=null){
				sbSql.append(" and pgv.phone_version_id=?");
				values.add(t.getPhoneVersionId());
			}
			if(t.getModelId()!=null){
				sbSql.append(" and pgv.model_id=?");
				values.add(t.getModelId());
			}
		}
		return this.find(sbSql.toString(),values.toArray());
	}

}
