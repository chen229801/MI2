package com.mi2.model;

import com.base.model.BaseGoods;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Goods extends BaseGoods<Goods>{
	public static final Goods dao = new Goods();


	//删除其他商品信息
	public boolean deletePhoneGoods(Goods t){
		//删除其他商品图片信息
		new GoodsColor().deleteOtherGoodsColor(t.getGoodsId());
		//删除其他商品适配机型信息
		new GoodsAdapterPhone().batchDelete(t.getGoodsId());
		//删除商品基本信息
		return new Goods().deleteById(t.getGoodsId());
	}

	public Goods findById(BigDecimal goodsId) {
		if(null==goodsId){
			return null;
		}
		Goods t = new Goods();
		t.setGoodsId(goodsId);
		List<Goods> goodsList = this.getAllData(t);
		return goodsList.size()>0?goodsList.get(0):null;
	}

	@Override
	public Page<Goods> getAllDataByPage(int pageNumber, int pageSize, Goods t) {
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("from goods_big_type gbt,goods_small_type gst,goods g where gbt.goods_big_type_id = gst.goods_big_type_id and gst.goods_small_type_id = g.goods_small_type_id ");
		ArrayList<Object> values = new ArrayList<>();
		if(t!=null&&!t.getAttrs().isEmpty()){
			if(StrKit.notBlank(t.getStr("goods_big_type_id"))){
				sbSql.append(" and gst.goods_big_type_id=?");
				values.add(t.getStr("goods_big_type_id"));
			}
			if(StrKit.notBlank(t.getGoodsName())){
				sbSql.append(" and g.goods_name like ?");
				values.add("%"+t.getGoodsName()+"%");
			}
			if(t.getGoodsSmallTypeId()!=null){
				sbSql.append(" and gst.goods_small_type_id=?");
				values.add(t.getGoodsSmallTypeId());
			}
		}
		return this.paginate(pageNumber,pageSize,"select gbt.*,gst.goods_small_type_name,g.* ",sbSql.toString(),values.toArray());
	}

	@Override
	public List<Goods> getAllData(Goods t) {
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("select gbt.*,gst.goods_small_type_name,g.* from goods_big_type gbt,goods_small_type gst,goods g where gbt.goods_big_type_id = gst.goods_big_type_id and gst.goods_small_type_id = g.goods_small_type_id ");
		ArrayList<Object> values = new ArrayList<>();
		if(t!=null&&!t.getAttrs().isEmpty()){
			if(StrKit.notBlank(t.getStr("goods_big_type_id"))){
				sbSql.append(" and gst.goods_big_type_id=?");
				values.add(t.getStr("goods_big_type_id"));
			}
			if(t.getGoodsSmallTypeId()!=null){
				sbSql.append(" and gst.goods_small_type_id=?");
				values.add(t.getGoodsSmallTypeId());
			}
			if(t.getGoodsId()!=null){
				sbSql.append(" and g.goods_id = ?");
				values.add(t.getGoodsId());
			}
			if(StrKit.notBlank(t.getGoodsName())){
				sbSql.append(" and g.goods_name like ?");
				values.add("%"+t.getGoodsName()+"%");
			}
		}
		return this.find(sbSql.toString(),values.toArray());
	}
}
