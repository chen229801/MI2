package com.mi2.model;

import com.base.model.BaseUsersOrders;
import com.base.util.DateUtils;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class UsersOrders extends BaseUsersOrders<UsersOrders> {
	public static final UsersOrders dao = new UsersOrders();

	public BigDecimal getUserSumNotReceivedOrderNum(BigDecimal userFrontId){
		String sql = "select count(uo.orders_id) order_sum from users_orders uo where uo.orders_status<>4 and uo.user_front_id=?";
		UsersOrders uo = this.findFirst(sql,userFrontId);
		return BigDecimal.valueOf(Long.valueOf(uo.get("order_sum",0)+""));
	}

	@Override
	public List<UsersOrders> getAllData(UsersOrders t) {
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("select * from users_orders uo where 1=1 ");
		ArrayList<Object> values = new ArrayList<>();
		if(t!=null&&!t.getAttrs().isEmpty()){
			if(t.getOrdersId()!=null){
				sbSql.append(" and uo.orders_id=?");
				values.add(t.getOrdersId());
			}
		}
		sbSql.append(" order by uo.orders_id desc");
		List<UsersOrders> uoList = this.find(sbSql.toString(),values.toArray());
		for(int i=0,size=uoList.size();i<size;i++){
			UsersOrders uo =uoList.get(i);
			uoList.get(i).put("phoneGoodsList",UsersOrdersDetail.dao.getPhoneGoodsAllData(uo));
			uoList.get(i).put("otherGoodsList",UsersOrdersDetail.dao.getOtherGoodsAllData(uo));
		}
		return uoList;
	}

	@Override
	public Page<UsersOrders> getAllDataByPage(int pageNumber, int pageSize, UsersOrders t) {
		/*if(t==null||t.getUserFrontId()==null){
			return new Page<>(new ArrayList<UsersOrders>(),pageNumber,pageSize,0,0);
		}*/
		StringBuilder sbSql = new StringBuilder();
		sbSql.append("from users_orders uo where 1=1 ");
		ArrayList<Object> values = new ArrayList<>();
		if(t!=null&&!t.getAttrs().isEmpty()){
			if(t.getUserFrontId()!=null){
				sbSql.append(" and uo.user_front_id=?");
				values.add(t.getUserFrontId());
			}
			if(StrKit.notBlank(t.getUserOrdersId())){
				sbSql.append(" and uo.user_orders_id=?");
				values.add(t.getUserOrdersId());
			}
			if(t.getOrdersStatus()!=null){
				sbSql.append(" and uo.orders_status<>?");
				values.add(t.getOrdersStatus());
			}
			String orders_search_keys = t.get("orders_search_keys");
			if(StrKit.notBlank(orders_search_keys)){
				sbSql.append(" and exists(select uo.orders_id from users_orders_detail uod2,phone_goods_view pgv2 where uo.orders_id = uod2.orders_id and uod2.goods_id is null and uod2.phone_goods_id = pgv2.phone_goods_id and pgv2.GOODS_SMALL_TYPE_NAME like ? union select uo.orders_id from users_orders_detail uod2,other_goods_view ogv2 where uo.orders_id = uod2.orders_id and uod2.phone_goods_id is null and uod2.goods_id = ogv2.goods_id and ogv2.goods_name like ?)");
				values.add("%"+orders_search_keys+"%");
				values.add("%"+orders_search_keys+"%");
			}


			String search_key = t.get("search_key");
			if(StrKit.notBlank(search_key)){
				sbSql.append(" and (uo.user_orders_id=? or uo.name like ? or uo.telephone=?)");
				values.add(search_key);
				values.add("%"+search_key+"%");
				values.add(search_key);
			}
			String search_orders_status = t.get("search_orders_status");
			if(StrKit.notBlank(search_orders_status)){
				sbSql.append(" and uo.orders_status=?");
				values.add(search_orders_status);
			}
			String search_orders_time1 = t.get("search_orders_time1");
			String search_orders_time2 = t.get("search_orders_time2");
			if(StrKit.notBlank(search_orders_time1)){
				sbSql.append(" and uo.orders_time>=?");
				values.add(DateUtils.strToSqlDate(search_orders_time1,DateUtils.DATE));
			}
			if(StrKit.notBlank(search_orders_time2)){
				sbSql.append(" and uo.orders_time<=?");
				values.add(DateUtils.strToSqlDate(search_orders_time2,DateUtils.DATE));
			}
		}
		sbSql.append(" order by uo.orders_status,uo.orders_id desc");
		Page<UsersOrders> pageUtil = this.paginate(pageNumber,pageSize,"select * ",sbSql.toString(),values.toArray());
		for(int i=0,size=pageUtil.getList().size();i<size;i++){
			UsersOrders uo = pageUtil.getList().get(i);
			pageUtil.getList().get(i).put("phoneGoodsList",UsersOrdersDetail.dao.getPhoneGoodsAllData(uo));
			pageUtil.getList().get(i).put("otherGoodsList",UsersOrdersDetail.dao.getOtherGoodsAllData(uo));
		}
		return pageUtil;
	}
}
